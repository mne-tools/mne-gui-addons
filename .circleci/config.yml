version: 2.1
jobs:
    build_docs:
      parameters:
        scheduled:
          type: string
          default: "false"
      docker:
        - image: cimg/base:current-22.04
      steps:
        - checkout
        - run:
            name: Check-skip
            command: |
              set -e
              export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
              if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
                echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
                circleci-agent step halt;
              fi
        - run:
            name: Set BASH_ENV
            command: |
              set -e
              set -o pipefail
              git clone --single-branch --branch main git@github.com:/mne-tools/mne-python.git
              ./mne-python/tools/setup_xvfb.sh
              sudo apt install -qq graphviz optipng python3.10-venv python3-venv libxft2 ffmpeg
              python3.10 -m venv ~/python_env
              echo "set -e" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
              echo "export MNE_3D_OPTION_MULTI_SAMPLES=1" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
              echo "export DISPLAY=:99" >> $BASH_ENV
              echo "source ~/python_env/bin/activate" >> $BASH_ENV
              mkdir -p ~/.local/bin
              ln -s ~/python_env/bin/python ~/.local/bin/python
              echo "BASH_ENV:"
              cat $BASH_ENV
              mkdir -p ~/mne_data
        - run:
            name: Get Python running
            command: |
              pip install --upgrade PyQt6!=6.6.0 "PyQt6-Qt6!=6.6.0,!=6.7.0" sphinx-gallery pydata-sphinx-theme numpydoc scikit-learn nilearn mne-bids autoreject pyvista memory_profiler sphinxcontrib.bibtex sphinxcontrib.youtube darkdetect qdarkstyle
              pip install --pre --progress-bar off --only-binary dipy --extra-index-url "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple" "dipy>1.9"
              pip install -ve ./mne-python .
        - run:
            name: Check Qt
            command: |
              ./mne-python/tools/check_qt_import.sh PyQt6
        - run:
            name: Check installation
            command: |
               which python
               QT_DEBUG_PLUGINS=1 mne sys_info -pd
               python -c "import numpy; numpy.show_config()"
               LIBGL_DEBUG=verbose python -c "import pyvistaqt; pyvistaqt.BackgroundPlotter(show=True)"
        - run:
            name: List packages
            command: python -m pip list
        - restore_cache:
            keys:
              - data-cache-sample
        - restore_cache:
            keys:
              - data-cache-misc
        - restore_cache:
            keys:
              - data-cache-somato
        - run:
            name: Get data
            command: |
              python -c "import mne; mne.datasets.somato.data_path(update_path=True, verbose=True); mne.datasets.misc.data_path(update_path=True, verbose=True); sample_path = mne.datasets.sample.data_path(update_path=True, verbose=True); mne.datasets.fetch_fsaverage(subjects_dir=sample_path / 'subjects', verbose=True)"
              ls -al ~/mne_data;
        - run:
            name: make html
            command: |
              make -C doc html
            no_output_timeout: 30m
        - store_test_results:
            path: doc/_build/test-results
        - store_artifacts:
            path: doc/_build/test-results
            destination: test-results
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html
        - save_cache:
            key: data-cache-sample
            paths:
              - ~/mne_data/MNE-sample-data
        - save_cache:
            key: data-cache-somato
            paths:
              - ~/mne_data/MNE-somato-data
        - save_cache:
            key: data-cache-misc
            paths:
              - ~/mne_data/MNE-misc-data

    deploy:
      machine:
        image: ubuntu-2004:202111-01
      steps:
        - attach_workspace:
            at: /tmp/build
        - restore_cache:
            keys:
              - website-cache
        - add_ssh_keys:
            fingerprints:
              - "18:ca:dc:af:9a:80:ee:23:91:fd:84:ae:93:7a:7b:4f"
        - run:
            name: Deploy docs
            command: |
              set -eo pipefail
              mkdir -p ~/.ssh
              echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config
              chmod og= ~/.ssh/config
              git config --global user.email "circle@mne.tools"
              git config --global user.name "Circle CI"
              if [ ! -d ~/mne-tools.github.io ]; then
                git clone git@github.com:/mne-tools/mne-tools.github.io.git ~/mne-tools.github.io
              fi
              cd ~/mne-tools.github.io
              git checkout main
              git fetch origin
              git reset --hard origin/main
              git clean -xdf
              echo "Deploying dev docs for ${CIRCLE_BRANCH}."
              rm -Rf mne-gui-addons
              cp -a /tmp/build/html mne-gui-addons
              git add -A
              git commit -m "CircleCI update of mne-gui-addons docs (${CIRCLE_BUILD_NUM})."
              git push origin main
        - save_cache:
            key: website-cache
            paths:
              - ~/mne-tools.githbub.io

workflows:
  default:
    jobs:
      - build_docs:
          filters:
            tags:
              only: /^v.*/
          name: build_docs
      - deploy:
          name: deploy
          requires:
            - build_docs
          filters:
            branches:
              only:
                - main
            tags:
              only: /^v.*/
